=== TensorFlow Lite Conversion Instructions ===

Due to Windows Long Path limitations, we cannot install the full TensorFlow package directly.
Here's how to convert these H5 models to TensorFlow Lite format:

Option 1: Use Google Colab (Recommended)
1. Go to https://colab.research.google.com/
2. Create a new notebook
3. Upload these H5 files to your Colab environment:
   - models/mobilenet_skintone_final.h5
   - models/mobilenet_undertone_final.h5
4. Run the following code in a cell:

```python
import tensorflow as tf

# Convert skintone model
print("Converting skintone model...")
model = tf.keras.models.load_model('mobilenet_skintone_final.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_model = converter.convert()

with open('skintone_model.tflite', 'wb') as f:
    f.write(tflite_model)
print("Skintone model converted successfully!")

# Convert undertone model
print("Converting undertone model...")
model = tf.keras.models.load_model('mobilenet_undertone_final.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_model = converter.convert()

with open('undertone_model.tflite', 'wb') as f:
    f.write(tflite_model)
print("Undertone model converted successfully!")

# Download the TFLite models
from google.colab import files
files.download('skintone_model.tflite')
files.download('undertone_model.tflite')
```

Option 2: Use Docker (Recommended for local conversion)
1. Install Docker Desktop from https://www.docker.com/products/docker-desktop
2. Verify Docker installation by running check_docker.ps1
3. Open PowerShell in the project directory
4. Build the Docker image:
   docker build -t tflite-converter .
5. Run the conversion:
   docker run -v ${PWD}:/app tflite-converter
6. The TFLite models will be created in the models directory

Option 3: Use Linux environment/WSL
1. Install WSL2 if not already installed
2. Install Python and TensorFlow in your Linux environment:
   pip install tensorflow
3. Run the conversion script:
   python convert_models.py

After conversion, you'll have:
- models/skintone_model.tflite
- models/undertone_model.tflite

To verify the conversion worked correctly:
1. Check that the TFLite files exist and are not empty
2. Run the test script: python test_model_conversion.py (if TensorFlow is available)
3. Verify file sizes (should be much smaller than the original H5 files)

These TFLite models can then be integrated into your Flutter app using the tflite_flutter package.

For detailed integration instructions, see FLUTTER_INTEGRATION_GUIDE.md